--- 
name: "Azure Pipelines"
stages: 
  - 
    jobs: 
      - 
        job: Build
        pool: 
          name: "Azure Pipelines"
        steps: 
          - 
            displayName: "Install SSH Key"
            inputs: 
              knownHostsEntry: "SHA256:mdU7wqIx5scJzMcEQp5BCY9Z/R7sBDgd0pCbDmRyIIE bkelava@github.com"
              sshKeySecureFile: id_rsa
            task: InstallSSHKey@0
          - 
            displayName: "Azure CLI"
            inputs: 
              azureSubscription: "Azure subscription 1 (cd0e3e14-48ba-42ac-b0d2-13d78472acc3)"
              inlineScript: |
                  az --version
                  az account show
              scriptLocation: inlineScript
              scriptType: ps
            task: AzureCLI@2
          - 
            displayName: "Terraform : azurerm"
            inputs: 
              backendAzureRmContainerName: blobkelava
              backendAzureRmKey: DbJ3u3rW
              backendAzureRmResourceGroupName: RG
              backendAzureRmStorageAccountName: terraformkelava
              backendServiceArm: "Azure subscription 1 (cd0e3e14-48ba-42ac-b0d2-13d78472acc3)"
            task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV2@2
          - 
            displayName: "Install Terraform"
            inputs: 
              terraformVersion: "0.13.5"
            task: TerraformInstaller@0
          - 
            displayName: "Terraform Init"
            inputs: 
              backendAzureRmContainerName: $(terraformcontainer)
              backendAzureRmKey: terraform.tfstate
              backendAzureRmResourceGroupName: $(terraformstoragerg)
              backendAzureRmStorageAccountName: $(terraformstorageaccount)
              backendServiceArm: "Azure subscription 1 (cd0e3e14-48ba-42ac-b0d2-13d78472acc3)"
              command: init
              provider: azurerm
              workingDirectory: $(System.DefaultWorkingDirectory)/terraform
            task: TerraformTaskV1@0
          - 
            displayName: "Terraform Apply"
            inputs: 
              command: apply
              commandOptions: "-auto-approve -var=\"public_key=$(myPubKey))\""
              environmentServiceNameAzureRM: "Azure subscription 1 (cd0e3e14-48ba-42ac-b0d2-13d78472acc3)"
              provider: azurerm
              workingDirectory: $(System.DefaultWorkingDirectory)/terraform
            task: TerraformTaskV1@0
          - 
            displayName: "Archive FakeRestAPI Web App"
            inputs: 
              archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
              archiveType: zip
              includeRootFolder: false
              rootFolderOrFile: automatedtesting/jmeter/fakerestapi
            task: ArchiveFiles@2
          - 
            artifact: drop-fakerestapi
            displayName: "Upload Fakerestapi Package"
            publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
          - 
            displayName: "Archive Selenium Tests"
            inputs: 
              archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-selenium.zip
              archiveType: zip
              includeRootFolder: false
              rootFolderOrFile: automatedtesting/selenium
            task: ArchiveFiles@2
          - 
            artifact: selenium
            displayName: "Upload Selenium Package"
            publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-selenium.zip
    stage: Build
  - 
    jobs: 
      - 
        deployment: FakeRestAPI
        displayName: "Deploy Web App to APP Service"
        environment: TEST
        pool: 
          vmImage: Ubuntu-20.04
        strategy: 
          runOnce: 
            deploy: 
              steps: 
                - 
                  displayName: "Deploy CodingAPP to App Service"
                  inputs: 
                    appName: codingapp-appservice
                    appType: webApp
                    azureSubscription: "Azure subscription 1 (cd0e3e14-48ba-42ac-b0d2-13d78472acc3)"
                    package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
                  task: AzureWebApp@1
      - 
        deployment: VMDeploy
        displayName: "Deploy Virtual Machine"
        environment: 
          name: DEV
          resourceType: VirtualMachine
          tags: codingapp
        strategy: 
          runOnce: 
            deploy: 
              steps: 
                - 
                  inputs: 
                    script: "#! /bin/bash           \n\
                        sudo apt-get upgrade -y\n\
                        sudo apt-get install unzip -y\n\
                        sudo apt-get install python3  -y\n\
                        sudo apt-get update -y\n\
                        sudo apt-get install python3-pip -y\n\
                        sudo apt-get install -y chromium-browser\n\
                        pip3 --version\n\
                        pip3 install selenium\n\
                        pip3 install --upgrade pip\n\
                        export PATH=$PATH:'usr/bin'   \n"
                    targetType: inline
                  task: Bash@3
                - 
                  displayName: "Copy Selenium Archive to VM"
                  inputs: 
                    archiveFilePatterns: $(Agent.BuildDirectory)/selenium/$(Build.BuildId)-selenium.zip
                    cleanDestinationFolder: true
                    destinationFolder: $(System.DefaultWorkingDirectory)/Selenium
                    overwriteExistingFiles: true
                  task: ExtractFiles@1
                - 
                  displayName: "Install Packages"
                  inputs: 
                    script: "pip3 install -r requirements.txt"
                    targetType: inline
                    workingDirectory: $(System.DefaultWorkingDirectory)/Selenium
                  task: Bash@3
                - 
                  displayName: "Create a Folder for logs"
                  inputs: 
                    script: "mkdir -p $(Agent.BuildDirectory)/vmlogs\n"
                    targetType: inline
                  task: Bash@3
                - 
                  displayName: "Run Selenium Python Tests"
                  inputs: 
                    script: "python3 login.py | tee -a $(Agent.BuildDirectory)/vmlogs/$(Build.BuildId)-log.txt"
                    targetType: inline
                    workingDirectory: $(System.DefaultWorkingDirectory)/Selenium
                  task: Bash@3
      - 
        displayName: "Run Postman Data Validation API Test"
        job: IntergrationTesting
        steps: 
          - 
            checkout: self
            clean: true
          - 
            displayName: "Install Newman"
            inputs: 
              script: "sudo npm install -g newman\n"
              workingDirectory: $(System.DefaultWorkingDirectory)
            task: CmdLine@2
          - 
            continueOnError: true
            displayName: "Run API Tests"
            inputs: 
              failOnStderr: true
              script: "newman run starterdata.json -d startertestdata.json -e starterenvironment.json --reporters cli,junit --reporter-junit-export junitReport.xml\n"
              workingDirectory: automatedtesting/postman
            task: CmdLine@2
          - 
            displayName: "Copy Test Results"
            inputs: 
              Contents: "**/*.xml"
              SourceFolder: $(System.DefaultWorkingDirectory)/automatedtesting/postman
              TargetFolder: $(build.artifactstagingdirectory)/automatedtesting/postman
            task: CopyFiles@2
          - 
            displayName: "Publish Test Results"
            inputs: 
              searchFolder: $(System.DefaultWorkingDirectory)/automatedtesting/postman
              testResultsFiles: "**/*.xml"
              testResultsFormat: JUnit
            task: PublishTestResults@2
      - 
        displayName: "Run Postman Regression API Test"
        job: IntergrationRegressopmTesting
        steps: 
          - 
            checkout: self
            clean: true
          - 
            displayName: "Install Newman"
            inputs: 
              script: "sudo npm install -g newman\n"
              workingDirectory: $(System.DefaultWorkingDirectory)
            task: CmdLine@2
          - 
            continueOnError: true
            displayName: "Run API Tests"
            inputs: 
              failOnStderr: true
              script: "newman run starterregression.json -d startertestdata.json -e starterenvironment.json --reporters cli,junit --reporter-junit-export junitReport.xml\n"
              workingDirectory: automatedtesting/postman
            task: CmdLine@2
          - 
            continueOnError: true
            displayName: "Copy Test Results"
            inputs: 
              Contents: "**/*.xml"
              SourceFolder: $(System.DefaultWorkingDirectory)/automatedtesting/postman
              TargetFolder: $(build.artifactstagingdirectory)/automatedtesting/postman
            task: CopyFiles@2
          - 
            displayName: "Publish Test Results"
            inputs: 
              searchFolder: $(System.DefaultWorkingDirectory)/automatedtesting/postman
              testResultsFiles: "**/*.xml"
              testResultsFormat: JUnit
            task: PublishTestResults@2
      - 
        displayName: "Run Endurance tests"
        job: PerformanceEnduranceTesting
        steps: 
          - 
            displayName: "Execute JMeter Endurance tests"
            inputs: 
              arguments: "$(System.DefaultWorkingDirectory)/automatedtesting/jmeter Endurance.jmx $(host)"
              failOnStderr: false
              filePath: $(System.DefaultWorkingDirectory)/automatedtesting/jmeter/test.sh
              targetType: filePath
              workingDirectory: $(System.DefaultWorkingDirectory)/automatedtesting/jmeter
            task: Bash@3
          - 
            displayName: "Publish JMeter Report"
            inputs: 
              artifact: "Jmeter Endurance Test Report"
              targetPath: $(System.DefaultWorkingDirectory)/automatedtesting/jmeter/report
            task: PublishPipelineArtifact@1
      - 
        displayName: "Run Stress tests"
        job: PerformanceStressTesting
        steps: 
          - 
            displayName: "Execute JMeter Stress tests"
            inputs: 
              arguments: "$(System.DefaultWorkingDirectory)/automatedtesting/jmeter Stress.jmx $(host)"
              failOnStderr: false
              filePath: $(System.DefaultWorkingDirectory)/automatedtesting/jmeter/test.sh
              targetType: filePath
              workingDirectory: $(System.DefaultWorkingDirectory)/automatedtesting/jmeter
            task: Bash@3
          - 
            displayName: "Publish JMeter Report"
            inputs: 
              artifact: "Jmeter Stress Test Report"
              targetPath: $(System.DefaultWorkingDirectory)/automatedtesting/jmeter/report
            task: PublishPipelineArtifact@1
    stage: Deploy
